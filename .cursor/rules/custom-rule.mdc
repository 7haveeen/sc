---
description: General rules for very request
globs: 
alwaysApply: true
---
Start all responses with ðŸ¤–

## Reasoning Process 
Always remember to thoroughly analyze the issueâ€”assess all possible causes, weigh the solutions carefully, and provide the most effective, well-tested, and professional and optimised fix. Avoid quick, unvalidated responses that could worsen the problem or create new ones. make sure to apply the DRY (Don't Repeat Yourself) principle where possible.

<important_info>
Use Svelte 5's new syntax with TypeScript for reactivity, props, events, and content passing. Prioritize this over Svelte 4 syntax unless specified otherwise.

**Key Changes:**

- **Reactivity:** `$state` for reactive state, `$derived` for computed values, `$effect` for side effects.
- **Props:** Use `$props()` instead of `export let`.
- **Events:** Use HTML attributes (e.g., `onclick`) instead of `on:`.
- **Content:** Use `{#snippet}` and `{@render}` instead of slots.

**Quick Examples:**

1. **State & Events:** `<script lang="ts">let count = $state(0); </script> <button onclick={() => count += 1}>{count}</button>`
2. **Derived:** `let doubled = $derived(count * 2);`
3. **Props:** `<script lang="ts">let { name = 'World' } = $props(); </script> <p>Hello, {name}!</p>`
4. **Binding:** `<script lang="ts">let { value = $bindable() } = $props(); </script> <input bind:value={value} />`
5. **Snippets:** `<div>{@render header()}</div>` with `<Child>{#snippet header()}<h1>Header</h1>{/snippet}</Child>`
6. **Class Store:** `class Counter { count = $state(0); increment() { this.count += 1; } } export const counter = new Counter();`

**Notes:**

- Type `$derived` explicitly (e.g., `let items: Item[] = $derived(...)`) for arrays in TypeScript.
- Default to new syntax for Svelte 5 benefits.
- Avoid stores unless necessary for pub/sub.
</important_info>

Taking the important_info into account, make a simple client side todo app using svelte 5. Do everything client side, put everything in one component, use typescript, and make sure you use the new runes syntax for state. The user should be able to view their todos, make one as done, create a new done, and delete an old one. Style the component with tailwind, make it clean, pleasant to look at, and simple.

## Tech Stack

- Svelte 5 with Runes syntax ($state, $derived, $effect, $props, $bindable)
- SvelteKit 2 for routing and SSR
- TypeScript for type safety
- Hono backend server with API routes
- Bits-UI and shadcn-svelte for UI components
- TailwindCSS for styling with tailwind-variants
- Zod for validation
- Superforms (sveltekit-superforms) for form handling
- Formsnap for form state management
- Bun as the package manager and runtime
- Lucide icons

## Project Structure

```
apps/
  frontend/
    src/
      lib/
        components/
          ui/          # shadcn-svelte components
          icons/       # icon components
          app/         # app-specific components
          custom/      # custom UI components
        hooks/        # custom hooks
        services/     # API services
        stores/       # global stores
        utils.ts      # frontend utilities
        ROUTES.ts     # route definitions
      routes/
        (auth)/       # auth layout group
        (app)/        # authenticated layout group
        (business)/   # business layout group
  backend/
    src/
      api/           # API setup
      lib/           # backend libs
      routes/        # Hono routes
      utils/         # backend utilities

packages/
  shared/
    controllers/    # Shared controllers
    entities/       # Shared entities
    utils/          # shared utilities
    types.ts        # shared TypeScript types
  typescript-config/ # Shared TypeScript configurations
```

## Conventions

### Code Style

- Use Svelte 5 Runes syntax ($state, $derived, $effect, $props, $bindable)
- Write concise TypeScript code with proper type annotations
- Follow functional and declarative patterns
- Use shared entities and controllers from shared package
- Import shared code as @repo/shared only
- Implement Zod for validation
- Keep components small and focused
- Implement proper error boundaries
- One/line icon imports 

### Naming

- Component files: lowercase with hyphens (auth-form.svelte)
- Component imports: PascalCase (AuthForm)
- Variables/functions/props: camelCase
- Backend methods: kebab-case
- Routes and files: kebab-case
- Route parameters: snake_case
- Type definitions: PascalCase with 'Type' suffix
- Interfaces: PascalCase with 'I' prefix
- Constants: SCREAMING_SNAKE_CASE

### State Management

- Use $state for local component state
- Use $derived for computed values
- Use $effect when needed for side effects
- Implement stores for global state
- Use URL state for route-specific data
- Leverage SvelteKit load functions
- Keep state close to where it's used

### Performance

- Leverage SSR and SSG capabilities
- Use backend methods for heavy operations
- Implement code splitting and lazy loading
- Use {#key} blocks for component re-rendering
- Implement proper caching strategies
- Optimize images and assets
- Use proper loading states
- Implement infinite scrolling where needed

### Data & Forms

- Use API services for data operations
- Implement SvelteKit load functions
- Use Superforms with Formsnap
- Implement proper form validation with Zod
- Handle loading, error, and success states
- Use optimistic updates where appropriate
- Implement proper data pagination
- Handle offline data appropriately

### UI & Accessibility

- Use Bits-UI for base components with shadcn-svelte
- Use tailwind-variants for component styling
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Support RTL layouts
- Implement proper color contrast
- Support text scaling
- Use proper focus management
- Implement proper loading states
- Support reduced motion
- Test with screen readers

### Security

- Implement proper authentication flows
- Use proper CSRF protection
- Sanitize user input
- Implement proper role-based access
- Use environment variables for secrets
- Implement proper API rate limiting
- Use secure headers
- Implement proper session management
- Use Argon2 for password hashing
- Implement proper rate limiting with hono-rate-limiter

### Error Handling

- Implement proper error boundaries
- Use try-catch blocks appropriately
- Log errors properly
- Show user-friendly error messages
- Handle network errors gracefully
- Implement proper fallback UI
- Use proper error tracking
- Use svelte-sonner for toast notifications

### Testing

- Write unit tests for utilities
- Write integration tests with jsdom
- Implement E2E tests for critical flows
- Test accessibility
- Test error scenarios
- Test loading states
- Test offline functionality

### Output Conventions

- Use the new Svelte 5 Runes syntax
- Use $props() for component props with destructuring
- Use $bindable() for refs and bound values
- Use @render for children slots
- Use string concatenation instead of template literals
- Use mobile-first approach
- Fix all errors before committing
- Ensure all tests pass
- Write clear commit messages
- Document API changes
- Update README when needed

### Context & Documentation

- Svelte 5: https://svelte.dev/docs
- SvelteKit 2: https://kit.svelte.dev/docs
- Bits-UI: https://www.bits-ui.com/docs
- shadcn-svelte: https://www.shadcn-svelte.com/docs
- Hono: https://hono.dev
- Superforms: https://superforms.rocks
- Formsnap: https://formsnap.dev
- TailwindCSS: https://tailwindcss.com/docs
- Zod: https://zod.dev
- Lucide Icons: https://lucide.dev